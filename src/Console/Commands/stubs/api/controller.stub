<?php

namespace App\Http\Controllers;

{{{uses}}}
use App\Services\CoreApiService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class {{{plural_uc}}}Controller extends Controller
{
    /**
     * Get a validator for an incoming registration request.
     *
     * @param  array  $data
     * @return \Illuminate\Contracts\Validation\Validator
     */
    protected function validator(array $data)
    {
        return Validator::make($data, [
            {{{validators}}}
        ]);
    }

    /**
     * INDEX - list {{{plural}}}
     *
     * @param  Request $request
     * @return view {{{plural}}}.index
     */
    public function index(Request $request)
    {

        $r = $request->all();
        if ($request->isMethod('POST')) {

            $filter = $this->prepareFilterSet($request);

            $request->session()->put('{{{plural}}}', [
                                        'filter' => array_filter($filter),
                                    ]);
        }

        if (blank($request->session()->get('{{{plural}}}')['filter'])) {
            $request->session()->put('{{{plural}}}', [
                                        'filter' => []
                                    ]);
        }

        $filter = $request->session()->get('{{{plural}}}')['filter'];

        $f = $this->prepareFilters($filter);

        $response = json_decode(
                        (new CoreApiService)
                            ->toJson()
                            ->{{{plural}}}(
                                'GET',
                                [],
                                $f
                            )
                    );

        ${{{plural}}} = {{{singular_uc}}}::hydrate($response->{{{plural}}});

        $response = json_decode(
                        (new CoreApiService)
                            ->toJson()
                            ->{{{plural}}}(
                                'GET',
                                ['plucks']
                            )
                    );

        $plucks = (array) $response->plucks;

        return view('{{{kebab_plural}}}.index', compact('{{{plural}}}', 'filter', 'plucks'));
    }

    /**
     * CREATE - form {{{singular}}}
     *
     * @return view {{{plural}}}.form
     */
    public function create()
    {
        $response = json_decode(
                        (new CoreApiService)
                            ->toJson()
                            ->{{{plural}}}(
                                'GET',
                                ['plucks']
                            )
                    );

        $plucks = (array) $response->plucks;

        return view('{{{kebab_plural}}}.form', compact('plucks'));
    }

    /**
     * STORE - store {{{singular}}}
     *
     * @param  Request $request
     * @return redirect {{{plural}}}
     */
    public function store(Request $request)
    {
        try {

            $response = json_decode(
                            (new CoreApiService)
                                ->toJson()
                                ->{{{plural}}}(
                                    'POST',
                                    ['create'],
                                    $request->all()
                                )
                        );

            if ($response->status === 200) {
                $request->session()->flash(
                    'msgSuccess',
                    trans('laravel-crud::alert.stored', ['element' => '{{{singular_uc}}}'])
                );
            }

        } catch (\Exception $e) {
            $request->session()->flash(
                'msgError',
                $e->getMessage()
            );

            return redirect()->back();
        }

        return redirect('{{{kebab_plural}}}');
    }

    /**
     * EDIT - edit {{{singular}}}
     *
     * @param  integer $id {{{singular}}}->id
     * @return view {{{plural}}}.form
     */
    public function edit($id)
    {
        $response = json_decode(
                        (new CoreApiService)
                            ->{{{plural}}}(
                                'GET',
                                [$id]
                            )
                    );

        if ($response->status === 404) {
            $request->session()->flash(
                'msgError',
                trans('laravel-crud::alert.not-found', ['element' => '{{{singular_uc}}}'])
            );

            return redirect('{{{kebab_plural}}}');
        }

        ${{{singular}}} = (new {{{singular_uc}}})->fill(
                        (array) $response->{{{singular}}}
                    );

        $response = json_decode(
                        (new CoreApiService)
                            ->toJson()
                            ->{{{plural}}}(
                                'GET',
                                ['plucks']
                            )
                    );

        $plucks = (array) $response->plucks;

        return view('{{{kebab_plural}}}.form', compact('{{{singular}}}', 'plucks'));
    }

    /**
     * UPDATE - update {{{singular}}}
     *
     * @param  integer $id      {{{singular}}}->id
     * @param  Request $request
     * @return redirect {{{plural}}}
     */
    public function update($id, Request $request)
    {
        try {

            $response = json_decode(
                            (new CoreApiService)
                                ->toJson()
                                ->{{{plural}}}(
                                    'PUT',
                                    [$id],
                                    $request->all()
                                )
                        );

            if ($response->status === 200) {
                $request->session()->flash(
                    'msgSuccess',
                    trans('laravel-crud::alert.updated', ['element' => '{{{singular_uc}}}'])
                );
            }

        } catch (\Exception $e) {
            $request->session()->flash(
                'msgError',
                $e->getMessage()
            );

            return redirect()->back();
        }


        return redirect('{{{kebab_plural}}}');
    }

    /**
     * SHOW - show {{{singular}}}
     *
     * @param  integer $id  {{{singular}}}->id
     * @return view         {{{plural}}}.show
     */
    public function show($id, Request $request)
    {
        $response = json_decode(
                        (new CoreApiService)
                            ->{{{plural}}}(
                                'GET',
                                [$id]
                            )
                    );

        if ($response->status === 404) {
            $request->session()->flash(
                'msgError',
                trans('laravel-crud::alert.not-found', ['element' => '{{{singular_uc}}}'])
            );

            return redirect('{{{kebab_plural}}}');
        }

        ${{{singular}}} = (new {{{singular_uc}}})->fill(
                        (array) $response->{{{singular}}}
                    );

        return view('{{{kebab_plural}}}.show', compact('{{{singular}}}'));
    }

    /**
     * DESTROY - delete {{{singular}}}
     *
     * @param  integer $id      {{{singular}}}->id
     * @return redirect         {{{plural}}}.index
     */
    public function destroy($id, Request $request)
    {
        try {

            $response = json_decode(
                            (new CoreApiService)
                                ->toJson()
                                ->{{{plural}}}(
                                    'DELETE',
                                    [$id]
                                )
                        );

            if ($response->status === 200) {
                $request->session()->flash(
                    'msgSuccess',
                    trans('laravel-crud::alert.stored', ['element' => '{{{singular_uc}}}'])
                );
            } elseif ($response->status === 422) {
                $request->session()->flash(
                    'msgError',
                    $response->errors
                );
            } elseif ($response->status === 404) {
                $request->session()->flash(
                    'msgError',
                    trans('laravel-crud::alert.not-found', ['element' => '{{{singular_uc}}}'])
                );
            }

        } catch (\Exception $e) {
            $request->session()->flash(
                'msgError',
                $e->getMessage()
            );

            return redirect()->back();
        }

        return redirect('{{{kebab_plural}}}');
    }

    /**
     * PREPARE FILTER SET
     *
     * @param  Request $request
     * @return array filterSet
     */
    protected function prepareFilterSet(Request $request)
    {
        $r = $request->all();

        $filterSet = [
                {{{filters_set}}}
            ];

        return $filterSet;
    }

    /**
     * PREPARE FILTERS
     *
     * @param  array filter
     * @return array filters
     */
    protected function prepareFilters(array $filter)
    {
        $filters = [
                {{{filters}}}
            ];

        return array_filter($filters);
    }
}
